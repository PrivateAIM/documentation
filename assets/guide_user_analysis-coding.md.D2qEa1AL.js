import{_ as s,c as a,o as i,a8 as n}from"./chunks/framework.CZrVQoiA.js";const g=JSON.parse('{"title":"Analysis Coding","description":"","frontmatter":{},"headers":[],"relativePath":"guide/user/analysis-coding.md","filePath":"guide/user/analysis-coding.md"}'),e={name:"guide/user/analysis-coding.md"},t=n(`<h1 id="analysis-coding" tabindex="-1">Analysis Coding <a class="header-anchor" href="#analysis-coding" aria-label="Permalink to &quot;Analysis Coding&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">Info</p><p>This section is under construction and the example does not run.</p></div><p>This example can be used as <code>entrypoint.py</code>, which is referenced in this documentation.</p><h3 id="example-analysis" tabindex="-1">Example Analysis <a class="header-anchor" href="#example-analysis" aria-label="Permalink to &quot;Example Analysis&quot;">​</a></h3><h4 id="calculate-average-age-based-on-a-fhir-query" tabindex="-1">Calculate average age based on a FHIR query <a class="header-anchor" href="#calculate-average-age-based-on-a-fhir-query" aria-label="Permalink to &quot;Calculate average age based on a FHIR query&quot;">​</a></h4><p>The query to be used in this analysis is the JSON version of the minimal example found in the next section. What this analysis will do ist calculate the average age of patients matching the query across multiple nodes.<br> The nodes will pass the query results to the aggregator.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flame_api</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fhirpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncFHIRClient</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fhir_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flame_api.source(“fhir”)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncFHIRClient(fhir_url)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    patients </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.resources(“Patient”)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patients.count())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> “__main__”:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio.get_event_loop()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loop.run_until_complete(main())</span></span></code></pre></div>`,7),l=[t];function h(p,r,k,o,d,c){return i(),a("div",null,l)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
