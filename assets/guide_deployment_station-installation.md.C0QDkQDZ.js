import{_ as t,c as e,o,a8 as a}from"./chunks/framework.f-dB4FaM.js";const p=JSON.parse('{"title":"Installation","description":"","frontmatter":{},"headers":[],"relativePath":"guide/deployment/station-installation.md","filePath":"guide/deployment/station-installation.md"}'),i={name:"guide/deployment/station-installation.md"},l=a('<h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This section will provide installation instructions for installing a PHT Station.<br><strong>It assumes that the station has been registered in the UI.</strong><br> For instructions on how to register the station see the instructions <a href="./../deployment/station-registration.html">here</a>.</p></div><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">Docker</a> and <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">docker-compose</a> need to be installed.<br></li><li>For the default installation to work the ports <code>8080</code> and <code>5432</code> need to be available on localhost.</li></ul><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Warning</p><p>If the station is set up on windows, the changes described <a href="./station-troubleshooting.html#station-setup-on-windows">here</a> must be made, before executing the following steps.</p></div><ol><li><p>Clone the repository: <code>git clone https://github.com/PHT-Medic/station.git</code></p></li><li><p>Navigate into the cloned project <code>cd station</code> and edit the <code>.env</code> file with your local configuration and <strong>the credentials</strong> you received after the <a href="./station-registration.html#public-key-registration">Public key registration</a>.<br><strong>Note:</strong> The <code>.env.tmpl</code> file is a template file that can be used to generate a <code>.env</code> file with the correct environment keys.</p></li></ol><table><thead><tr><th style="text-align:left;">Attribute</th><th style="text-align:left;">Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><code>STATION_ID</code></td><td style="text-align:left;">Chosen identifier of the station (match central UI configuration). You can find it as namespace</td></tr><tr><td style="text-align:left;"><code>STATION_PRIVATE_KEY_PATH</code></td><td style="text-align:left;">Path to the private key on the local filesystem that should be mounted as a volume</td></tr><tr><td style="text-align:left;"><code>PRIVATE_KEY_PASSWORD</code></td><td style="text-align:left;">If the private key is encrypted with a password, this password can be set using this variable</td></tr><tr><td style="text-align:left;"><code>AIRFLOW_USER</code></td><td style="text-align:left;">Admin user to be created for the airflow instance</td></tr><tr><td style="text-align:left;"><code>AIRFLOW_PW</code></td><td style="text-align:left;">Password for the airflow admin user</td></tr><tr><td style="text-align:left;"><code>HARBOR_URL</code></td><td style="text-align:left;">Url of the central harbor instance</td></tr><tr><td style="text-align:left;"><code>HARBOR_USER</code></td><td style="text-align:left;">Username to authenticate against harbor</td></tr><tr><td style="text-align:left;"><code>HARBOR_PW</code></td><td style="text-align:left;">Password to authenticate against harbor</td></tr><tr><td style="text-align:left;"><code>STATION_DATA_DIR</code></td><td style="text-align:left;">Absolute path of the directory where the station stores the input data for trains.<br>This path is also used by the FHIR client to store the query results before passing them to the trains</td></tr><tr><td style="text-align:left;"><code>FHIR_ADDRESS</code><br>(optional)</td><td style="text-align:left;">Address of the default FHIR server connected to the station <br>(this can also be configured per train)</td></tr><tr><td style="text-align:left;"><code>FHIR_USER</code><br>(optional)</td><td style="text-align:left;">Username to authenticate against the FHIR server using Basic Auth</td></tr><tr><td style="text-align:left;"><code>FHIR_PW</code><br>(optional)</td><td style="text-align:left;">Password for FHIR server Basic Auth</td></tr><tr><td style="text-align:left;"><code>FHIR_TOKEN</code><br>(optional)</td><td style="text-align:left;">Token to authenticate against the FHIR server using Bearer Token</td></tr><tr><td style="text-align:left;"><code>CLIENT_ID</code><br>(optional)</td><td style="text-align:left;">Identifier of client with permission to acces the FHIR server</td></tr><tr><td style="text-align:left;"><code>CLIENT_SECRET</code><br>(optional)</td><td style="text-align:left;">Secret of above client to authenticate against the provider</td></tr><tr><td style="text-align:left;"><code>OIDC_PROVIDER_URL</code><br>(optional)</td><td style="text-align:left;">Token url of Open ID connect provider <br>(e.g. keycloak, that is configured for the FHIR server)</td></tr><tr><td style="text-align:left;"><code>FHIR_SERVER_TYPE</code><br>(optional)</td><td style="text-align:left;">Type of FHIR server <br>(PHT FHIR client supports IBM, Hapi and Blaze FHIR servers)</td></tr></tbody></table><ol start="3"><li>Create a volume for the station: <code>docker volume create pg_station</code></li><li>Build the images by running: <code>docker-compose build</code></li></ol><h2 id="execution" tabindex="-1">Execution <a class="header-anchor" href="#execution" aria-label="Permalink to &quot;Execution&quot;">​</a></h2><ol><li>Run <code>docker-compose up -d</code></li><li>Check that the logs do not contain any startup errors with <code>docker-compose logs -f</code></li><li>Go to <code>http://localhost:8080</code> nd check whether you can see the web interface of Apache Airflow</li><li>Login to the airflow web interface with the previously set user credentials</li></ol>',11),n=[l];function r(s,d,c,h,f,u){return o(),e("div",null,n)}const b=t(i,[["render",r]]);export{p as __pageData,b as default};
