import{_ as i,c as a,a0 as n,o as e}from"./chunks/framework.BGabeMLJ.js";const E=JSON.parse('{"title":"Basic VCF Quality Control using Python","description":"","frontmatter":{},"headers":[],"relativePath":"guide/user/vcf-qc.md","filePath":"guide/user/vcf-qc.md"}'),t={name:"guide/user/vcf-qc.md"};function l(h,s,p,k,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="basic-vcf-quality-control-using-python" tabindex="-1">Basic VCF Quality Control using Python <a class="header-anchor" href="#basic-vcf-quality-control-using-python" aria-label="Permalink to &quot;Basic VCF Quality Control using Python&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">Info</p><p>This tutorial shows how to run a simple, single‑round federated VCF quality control (QC) analysis in <strong>FLAME</strong> using the provided <a href="/files/vcf_qc.py" download>vcf_qc.py</a> script. It reuses the generic concepts from the guides on <a href="/guide/user/analysis-coding.html">Coding an Analysis</a> and the <a href="/guide/user/sdk-core-doc.html">Core SDK</a>. For hub usage basics see <a href="/guide/user/analysis.html">Starting an Analysis</a>.</p><p>This example is an MVP-level QC. Do not treat it as a substitute for comprehensive clinical-grade validation workflows.</p></div><div class="info custom-block"><p class="custom-block-title">Download</p><p>Download the full reference script: <a href="/files/vcf_qc.py" download>vcf_qc.py</a></p></div><h2 id="goal" tabindex="-1">Goal <a class="header-anchor" href="#goal" aria-label="Permalink to &quot;Goal&quot;">​</a></h2><p>This tutorial demonstrates how to perform a federated quality check (QC) analysis using Python. You’ll learn how to inspect every <code>.vcf</code> or <code>.vcf.gz</code> file stored in an S3/MinIO bucket across multiple participating nodes. The process will generate an aggregated JSON report, summarizing the pass/fail status and warnings for each file and node. While this example focuses on QC for VCF files, the concepts and workflow can be adapted to a wide range of distributed data analysis tasks.</p><h2 id="what-the-script-does" tabindex="-1">What the Script Does <a class="header-anchor" href="#what-the-script-does" aria-label="Permalink to &quot;What the Script Does&quot;">​</a></h2><p>The script (<a href="/files/vcf_qc.py" download>vcf_qc.py</a>) defines:</p><ol><li><p><code>VCFAnalyzer</code> (runs on each analyzer node)</p><ul><li>Iterates over all VCF files made available via the project S3 datastore (optionally filtered by <code>VCF_S3_KEYS</code>).</li><li>Writes object bytes to a temporary file and opens it with <code>pysam.VariantFile</code>.</li><li>Collects per‑file checks: <ul><li>Non‑empty file</li><li><code>fileformat</code> present in header</li><li>At least one variant</li><li>(Warning) Missing contigs</li><li>(Warning) Unsorted records (chromosome &amp; position order)</li></ul></li><li>Counts variants, contigs and samples</li><li>Returns a per-node summary: counts of valid / invalid files, a list of file result dictionaries, and the unique <code>node_id</code>.</li></ul></li><li><p><code>VCFAggregator</code> (runs on the aggregator node)</p><ul><li>Receives all node summaries and produces JSON with: <ul><li><code>overall_pass</code> – all nodes passed (no invalid files and at least one valid file per passing node)</li><li><code>overall_total</code> – total number of valid files across nodes</li></ul></li></ul><ul><li><code>failing_nodes</code> – indices of nodes whose <code>node_pass</code> is <code>False</code></li><li><code>failed_nodes</code> – list of corresponding <code>node_id</code> values for failing nodes</li><li><code>warnings_present</code> – whether any node reported warnings</li><li><code>nodes</code> – the raw per‑node results (for transparency / auditing)</li></ul></li></ol><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>A project (proposal) with at least one analyzer node and one aggregator node approved (see <a href="/guide/user/project.html">Project Guide</a>).</li><li>The <strong>genomics</strong> master image available (contains <code>pysam</code> and other basic genomics tools).</li><li>MinIO (S3) datastores configured on each participating node. See admin docs for bucket setup: <a href="/guide/admin/bucket-setup-for-data-store.html">Bucket Setup</a> &amp; <a href="/guide/admin/data-store-management.html">Data Store Management</a>.</li></ul><h2 id="step‐by‐step" tabindex="-1">Step‑by‑Step <a class="header-anchor" href="#step‐by‐step" aria-label="Permalink to &quot;Step‑by‑Step&quot;">​</a></h2><ol><li><p>Project Selection</p><ul><li>Open the Hub, select your existing project (or create &amp; approve one first).</li></ul></li><li><p>Create Analysis</p><ul><li>Go to Analyses → Create.</li><li>Select image group: <code>python</code> and choose the <code>genomics</code> image.</li><li>Name &amp; describe (optional).</li></ul></li><li><p>Select Nodes</p><ul><li>Choose exactly one node as <strong>aggregator</strong> and one or more nodes as <strong>analyzers</strong>.</li></ul></li><li><p>Add Code</p><ul><li>Use / adapt <a href="/files/vcf_qc.py" download>vcf_qc.py</a>.</li><li>Upload the file and set it as the entry point.</li></ul></li><li><p>Prepare Data (per Node Admin)</p><ul><li>On every analyzer node AND the aggregator node, create (or reuse) an S3 bucket in MinIO.</li><li>Set bucket policy to public (for this MVP example) via MinIO UI: Summary → Access Policy.</li><li>Upload VCF files (<code>*.vcf</code> or <code>*.vcf.gz</code>).</li></ul></li></ol><div class="warning custom-block"><p class="custom-block-title">Important</p><p>Ensure VCF filenames (object keys) do <strong>not</strong> contain sensitive identifiers. In this example, filenames are included verbatim in aggregated results.</p></div><ol start="6"><li><p>Connect Datastores to the Analysis</p><ul><li>Node admin connects the bucket as a datastore to the project (This is not required for the aggregator).</li><li>Use protocol S3, correct host / port (e.g. <code>9000</code>), and <code>http</code> if TLS is not configured (MVP setting).</li></ul></li><li><p>Build &amp; Approvals</p><ul><li>Lock the analysis.</li><li>Each node admin reviews &amp; approves (see <a href="/guide/admin/analysis-review.html">Analysis Review</a>).</li></ul></li><li><p>Execute</p><ul><li>Each node admin starts the analysis manually (see <a href="/guide/admin/analysis-execution.html">Analysis Execution</a>).</li><li>The run is single‑round; once all analyzers finish, the aggregator produces the final JSON result.</li></ul></li><li><p>Download Result</p><ul><li>In the Hub UI, once status is Complete, download results (a tar archive). The JSON string is the final output.</li></ul></li></ol><h2 id="reference-code-excerpt" tabindex="-1">Reference Code (Excerpt) <a class="header-anchor" href="#reference-code-excerpt" aria-label="Permalink to &quot;Reference Code (Excerpt)&quot;">​</a></h2><p>The following excerpts highlight the key distributed computing patterns in <a href="/files/vcf_qc.py" download>vcf_qc.py</a>. The full file contains additional QC logic specific to VCF files.</p><p>The <code>StarModel</code> configuration defines how data is distributed and processed across nodes:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Configure StarModel for S3/MinIO objects. The dataset configuration in each node&#39;s hub</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # should point to the desired bucket; here we only specify the object keys.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    StarModel(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        analyzer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VCFAnalyzer,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        aggregator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VCFAggregator,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        data_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Distributed S3/MinIO data sources</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VCF_S3_KEYS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Same query across all analyzer nodes</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        simple_analysis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Single-round federation</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        output_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># JSON string result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span></code></pre></div><p>This setup enables each analyzer node to process its local data independently while using the same analysis logic.</p><div class="tip custom-block"><p class="custom-block-title">File Selection (VCF_S3_KEYS)</p><p>The script exposes a top‑level variable <code>VCF_S3_KEYS: List[str] | None = None</code>.</p><table tabindex="0"><thead><tr><th>Value</th><th>Behavior</th></tr></thead><tbody><tr><td><code>None</code></td><td>Analyze <strong>all</strong> objects in the configured bucket / prefix whose names end with <code>.vcf</code> or <code>.vcf.gz</code>.</td></tr><tr><td><code>[...]</code></td><td>Restrict analysis to exactly the listed object keys (must match the S3 object keys as seen in the datastore).</td></tr></tbody></table><p>Set this <strong>before</strong> starting the analysis (edit the script and re‑approve). The same files keys must be present on <strong>all</strong> participating nodes, otherwise nodes will attempt to fetch non-existent files. You may adapt the logic and implement a <strong>per-node</strong> key list.</p><p>Example restriction:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Only analyze two specific files inside the bucket prefix</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VCF_S3_KEYS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;cohortA/sample_001.vcf.gz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;cohortA/sample_002.vcf.gz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Ensure VCF filenames (object keys) do <strong>not</strong> contain sensitive identifiers. Filenames are included verbatim in aggregated results.</p></div><h3 id="analyzer-node-processing" tabindex="-1">Analyzer Node Processing <a class="header-anchor" href="#analyzer-node-processing" aria-label="Permalink to &quot;Analyzer Node Processing&quot;">​</a></h3><p>Each analyzer node processes its local dataset and returns structured results. The <code>analysis_method</code> receives a list of dictionaries where each dictionary maps S3 object keys to their actual file content (bytes):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VCFAnalyzer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StarAnalyzer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> analysis_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data: List[Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]], aggregator_results: Any) -&gt; Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        node_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.flame.get_id()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        file_results: List[Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # data is a list of dicts: [{&quot;s3_key1&quot;: file_content1, &quot;s3_key2&quot;: file_content2}, ...]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fname, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objects.items():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # Write S3 object content to temporary file for processing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempfile.NamedTemporaryFile(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tmp_file:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    tmp_file.write(content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Ensure data is flushed so pysam can read from the file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    tmp_file.flush()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    written_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tmp_file.tell()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # Process the temporary file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    fr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._process_vcf_file(fname, tmp_file.name, written_size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    file_results.append(fr)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Return node-level summary + detailed file results</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        invalid_file_count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file_results) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valid_file_count</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        node_pass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invalid_file_count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> valid_file_count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: node_pass,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: node_warnings_present,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;valid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: valid_file_count,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;invalid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: invalid_file_count,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: file_results,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Detailed per-file results</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;node_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: node_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p>The temporary file approach is necessary because tools like <code>pysam.VariantFile</code> require a file path, but FLAME provides S3 object content as in-memory data. Each analyzer processes only its local data but returns results in a standardized format for aggregation.</p><h3 id="secure-data-handling" tabindex="-1">Secure Data Handling <a class="header-anchor" href="#secure-data-handling" aria-label="Permalink to &quot;Secure Data Handling&quot;">​</a></h3><p>Files are processed in temporary locations without exposing sensitive content:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _process_vcf_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, fname: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size_bytes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pysam.VariantFile(path, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vf:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # Process file content locally ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Prevent leaking potentially sensitive error details across federation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fatal_reasons.append(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OpenError:ValueError:invalid header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: fname, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: passed,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;warnings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: warnings_flag,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: reason, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generic error messages only</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # ... aggregated metrics ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>Error handling ensures that sensitive details from local processing don&#39;t leak across the federation.</p><h3 id="cross-node-aggregation" tabindex="-1">Cross-Node Aggregation <a class="header-anchor" href="#cross-node-aggregation" aria-label="Permalink to &quot;Cross-Node Aggregation&quot;">​</a></h3><p>The aggregator combines results from all analyzer nodes into a federated summary. Since <code>has_converged</code> evaluates to <code>True</code>, the <code>aggregation_method</code> is executed only once, using a list of each node’s output.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VCFAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StarAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> aggregation_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, analysis_results: List[Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]]) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Combine results across all participating nodes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        overall_pass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analysis_results)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        overall_total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;valid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analysis_results)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        failing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(analysis_results) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        warnings_present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analysis_results)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        failed_nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [r.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> analysis_results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;overall_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: overall_pass,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: warnings_present,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;overall_total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: overall_total,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Federation-wide total</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;failed_nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: failed_nodes,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Node IDs of failing nodes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: analysis_results,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Full transparency of node results</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.dumps(result)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> has_converged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, result, last_result, num_iterations):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Single-round analysis (no iterative federation needed)</span></span></code></pre></div><p>The aggregator receives structured data from each node and produces federation-wide statistics without accessing raw data files.</p><h2 id="output-structure" tabindex="-1">Output Structure <a class="header-anchor" href="#output-structure" aria-label="Permalink to &quot;Output Structure&quot;">​</a></h2><p>Final JSON (example structure):</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;overall_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;overall_total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;failed_nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;valid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;invalid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample_1.vcf.gz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;size_bytes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">948</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;warnings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WARN: No contigs; WARN: Unsorted&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;contig_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;sample_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;variant_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample_2.vcf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;size_bytes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2050</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;warnings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;contig_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;sample_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    &quot;variant_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ... more files ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;node_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node-abc123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ... more nodes ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="field-notes" tabindex="-1">Field Notes <a class="header-anchor" href="#field-notes" aria-label="Permalink to &quot;Field Notes&quot;">​</a></h3><p>File‑level fields:</p><ul><li><code>pass</code> – <code>True</code> if no fatal issues.</li><li><code>warnings</code> – <code>True</code> if one or more non‑fatal warnings were added.</li><li><code>reason</code> – Concatenation of all messages, each prefixed with <code>FATAL:</code> or <code>WARN:</code>; empty string when there are none.</li><li><code>contig_count</code>, <code>sample_count</code>, <code>variant_count</code> – Simple counts extracted from the header / records.</li></ul><p>Node / overall level warning flags (<code>warnings_present</code>) bubble up if <strong>any</strong> file on that node (or any node overall) has warnings.</p><p>Fatal messages include things like <code>FATAL: Empty file</code>, <code>FATAL: Zero variants</code>, <code>FATAL: OpenError:...</code>. Warnings currently include <code>WARN: No contigs</code> and <code>WARN: Unsorted</code>.</p><h2 id="customizing" tabindex="-1">Customizing <a class="header-anchor" href="#customizing" aria-label="Permalink to &quot;Customizing&quot;">​</a></h2><ul><li>Limit to specific files by setting <code>VCF_S3_KEYS = [&quot;key/to/file1.vcf.gz&quot;, ...]</code> in the script.</li><li>Extend <code>_process_vcf_file</code> for additional QC metrics (e.g., INFO field presence, genotype completeness). Ensure you keep output JSON serializable.</li><li>Change <code>output_type</code> (<code>StarModel</code>) to <code>bytes</code> or <code>pickle</code> if you want to return richer objects (then adapt downstream tooling).</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Issue</th><th>Cause</th><th>Action</th></tr></thead><tbody><tr><td>Analysis does not start</td><td>Missing node approval</td><td>Contact the respective node admin</td></tr><tr><td>Empty results / <code>node_pass=False</code></td><td>No <code>.vcf</code> files detected</td><td>Confirm bucket contents</td></tr><tr><td><code>OpenError:ValueError</code> (or similar)</td><td>Corrupt / unsupported file</td><td>Re‑generate or remove problematic file</td></tr><tr><td>All files marked warning <code>Unsorted</code></td><td>Input not coordinate-sorted</td><td>Sort with <code>bcftools sort</code> and re‑upload</td></tr><tr><td><code>Zero variants</code> fatal</td><td>Header present but no records</td><td>Validate file generation pipeline</td></tr></tbody></table><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="/guide/user/sdk-core-doc.html">Core SDK Reference</a></li><li><a href="/guide/user/analysis-coding.html">Coding an Analysis</a></li><li><a href="/guide/admin/bucket-setup-for-data-store.html">Admin: Bucket Setup</a></li><li><a href="/guide/admin/analysis-execution.html">Admin: Analysis Execution</a></li><li><a href="/guide/user/survival-regression.html">Survival Regression Example</a></li></ul><hr><p>Author: Jules Kreuer</p>`,48)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
