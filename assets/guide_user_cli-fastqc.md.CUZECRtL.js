import{_ as i,c as a,a0 as t,o as e}from"./chunks/framework.BGabeMLJ.js";const c=JSON.parse('{"title":"Using CLI Tools for Federated FASTQ QC","description":"","frontmatter":{},"headers":[],"relativePath":"guide/user/cli-fastqc.md","filePath":"guide/user/cli-fastqc.md"}'),n={name:"guide/user/cli-fastqc.md"};function l(r,s,h,o,p,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="using-cli-tools-for-federated-fastq-qc" tabindex="-1">Using CLI Tools for Federated FASTQ QC <a class="header-anchor" href="#using-cli-tools-for-federated-fastq-qc" aria-label="Permalink to &quot;Using CLI Tools for Federated FASTQ QC&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">Assumed Knowledge</p><p>This guide assumes you&#39;re already familiar with the concepts shown in the <strong>VCF QC</strong> tutorial (federated execution model, analyzer vs. aggregator roles, project / datastore setup, approvals). If not, read that first: see <a href="/guide/user/vcf-qc.html">VCF QC Guide</a> plus the background docs on <a href="/guide/user/analysis-coding.html">Coding an Analysis</a> and the <a href="/guide/user/sdk-core-doc.html">Core SDK</a>.</p></div><div class="info custom-block"><p class="custom-block-title">Summary</p><p>This tutorial shows how to run a simple, single‑round federated FASTQ quality control (QC) analysis in <strong>FLAME</strong> using the external command‑line tool <strong>FastQC</strong> and the provided reference script <a href="/files/fastq_qc.py" download>fastq_qc.py</a>. It is an MVP / demonstration workflow and is <strong>not</strong> a substitute for comprehensive sequencing data QC or clinical validation pipelines.</p></div><div class="info custom-block"><p class="custom-block-title">Download</p><p>Download the full reference script: <a href="/files/fastq_qc.py" download>fastq_qc.py</a></p></div><h2 id="goal" tabindex="-1">Goal <a class="header-anchor" href="#goal" aria-label="Permalink to &quot;Goal&quot;">​</a></h2><p>Show how to use a <strong>command‑line tool</strong> (FastQC in our case) inside a single‑round federated analysis: handling temporary output, enforcing runtime constraints (quiet mode + timeout), parsing only the minimal required artifacts, and aggregating per‑file module statuses and basic stats across nodes without moving raw read data.</p><p>You will learn the exact CLI invocation pattern, where transient files live, and how to reproduce a node’s result locally using plain shell commands before (or after) federation.</p><div class="tip custom-block"><p class="custom-block-title">Why python?</p><p>As there is no FLAME StarModel for bash we must rely on python as wrapper for our CLI tools.</p></div><h2 id="what-the-script-does" tabindex="-1">What the Script Does <a class="header-anchor" href="#what-the-script-does" aria-label="Permalink to &quot;What the Script Does&quot;">​</a></h2><p>Condensed overview (details parallel the VCF QC example):</p><ul><li>Analyzer writes each candidate FASTQ object to a temp file and runs: <code>fastqc --quiet --outdir &lt;tmp&gt; &lt;file&gt;</code>.</li><li>Parses <code>fastqc_data.txt</code> (basic stats) + <code>summary.txt</code> (module statuses).</li><li>Fails a file on structural / runtime issues, zero sequences, missing required stats, or any module with status <code>FAIL</code>.</li><li>Marks warnings if one or more modules report <code>WARN</code>.</li><li>Aggregator concatenates per‑node results into one JSON; single round (<code>simple_analysis=True</code>).</li></ul><p>Anything not listed here works identically to the VCF QC pattern (data fan‑out, approvals, convergence logic).</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>A project (proposal) with at least one analyzer node and one aggregator node approved (see <a href="/guide/user/project.html">Project Guide</a>).</li><li>The <strong>genomics</strong> master image available (contains <code>pysam</code> and other basic genomics tools).</li><li>MinIO (S3) datastores configured on each participating node. See admin docs for bucket setup: <a href="/guide/admin/bucket-setup-for-data-store.html">Bucket Setup</a> &amp; <a href="/guide/admin/data-store-management.html">Data Store Management</a>.</li></ul><div class="warning custom-block"><p class="custom-block-title">Filenames &amp; Privacy</p><p>FASTQ filenames (object keys) are included verbatim in aggregated outputs. Ensure they do <strong>not</strong> contain sensitive identifiers. If needed, anonymize beforehand.</p></div><h2 id="cli-invocation-used" tabindex="-1">CLI Invocation Used <a class="header-anchor" href="#cli-invocation-used" aria-label="Permalink to &quot;CLI Invocation Used&quot;">​</a></h2><p>Each file is processed via (conceptually):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempfile.TemporaryDirectory() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp_dir:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clean workspace</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fastqc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--quiet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--outdir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, temp_dir, path]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subprocess.run(                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Controlled execution wrapper</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		cmd,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		capture_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prevent noisy/stdout leakage</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Easier error string handling</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Hard upper bound per file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.returncode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# Mark file failed with sanitized reason (no raw stderr leakage)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# Extract minimal metrics; discard directory when context exits</span></span></code></pre></div><p>The design above deliberately places each FASTQ file in its own clean workspace (<code>TemporaryDirectory</code>) so concurrent processing cannot collide on filenames and so every transient artifact (unzipped FastQC output, extracted text files) is guaranteed to be purged automatically on scope exit.</p><p>A per‑file temporary copy is necessary because FastQC (like many classic bioinformatics CLI tools such as <code>samtools</code>) operates on <strong>real filesystem paths</strong>; some tools also rely on filename extensions to auto‑detect compression (e.g. distinguishing gzipped input).</p><p>The explicit <code>timeout=300</code> acts as a safety valve: a single pathological, corrupt or unexpectedly huge file cannot monopolize runtime resources or stall the federated round. Increase this value only if you routinely process very large read sets and have validated performance.</p><p>Failure <strong>reasons are intentionally sanitized</strong>: the script emits generic, high‑signal messages instead of raw FastQC stderr or stack traces, reducing the risk of <strong>leaking sensitive sequence fragments</strong> or environment internals across nodes.</p><p>If a timeout or execution failure occurs, the script simply marks that specific file as failed (with a concise reason) and continues processing the remaining files so one bad input never invalidates the entire node contribution.</p><h2 id="output-structure" tabindex="-1">Output Structure <a class="header-anchor" href="#output-structure" aria-label="Permalink to &quot;Output Structure&quot;">​</a></h2><p>Example real output:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overall_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overall_total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;failed_nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e58721f5-b971-4028-bbf7-362a65a0e660&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;nodes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;node_pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;warnings_present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;valid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;invalid_file_count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SRR062634.filt.fastq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;size_bytes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80755971</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;warnings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WARN: per_tile_sequence_quality&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;total_sequences&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">308846</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;sequence_length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			 &quot;gc_content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		  // ... second file ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;node_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2a1828d3-e52a-4805-8dae-62eab8083031&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 // ... second node ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Issue</th><th>Hint</th></tr></thead><tbody><tr><td><code>FastQC executable not found</code></td><td>Wrong image selected.</td></tr><tr><td><code>FastQC timeout</code></td><td>Increase timeout or subset reads.</td></tr><tr><td>All files warning same modules</td><td>Investigate data quality locally with full HTML report.</td></tr><tr><td>Node fails with no files</td><td>Check extensions &amp; datastore mapping; maybe restrict keys incorrectly.</td></tr></tbody></table><h2 id="see-also" tabindex="-1">See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See Also&quot;">​</a></h2><ul><li><a href="/guide/user/vcf-qc.html">VCF QC Guide</a></li><li><a href="/guide/user/sdk-core-doc.html">Core SDK Reference</a></li><li><a href="/guide/user/analysis-coding.html">Coding an Analysis</a></li><li><a href="/guide/admin/analysis-execution.html">Admin: Analysis Execution</a></li><li><a href="/guide/admin/bucket-setup-for-data-store.html">Admin: Bucket Setup</a></li></ul><hr><p>Author: Jules Kreuer</p>`,32)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
