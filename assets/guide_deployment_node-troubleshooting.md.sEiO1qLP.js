import{_ as a,c as i,a0 as s,o as t}from"./chunks/framework.BGabeMLJ.js";const u=JSON.parse('{"title":"Troubleshooting","description":"","frontmatter":{},"headers":[],"relativePath":"guide/deployment/node-troubleshooting.md","filePath":"guide/deployment/node-troubleshooting.md"}'),n={name:"guide/deployment/node-troubleshooting.md"};function o(r,e,l,h,d,p){return t(),i("div",null,e[0]||(e[0]=[s(`<h1 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h1><h2 id="node-setup-on-windows" tabindex="-1">Node Setup on Windows <a class="header-anchor" href="#node-setup-on-windows" aria-label="Permalink to &quot;Node Setup on Windows&quot;">​</a></h2><p>If you are on a Windows Computer you need to change the line seperator to the <strong>Unix/macOS</strong>-style for the airflow directory. In Pycharm you can follow these steps:</p><ol><li>Select the airflow folder</li><li>Click on File in the top-left corner</li><li>Click on File Properties -&gt; Line Separators -&gt; LF - Unix and maxOS (\\n)</li></ol><h3 id="custom-dags" tabindex="-1">Custom DAGs <a class="header-anchor" href="#custom-dags" aria-label="Permalink to &quot;Custom DAGs&quot;">​</a></h3><p>If you want to use custom dags in airflow, you will have to change the docker-compose.yml; instated of pulling the latest pre-build airflow image; you have to build airflow locally. This is done by commenting out the &quot;build: &#39;./airflow&#39; &quot; line and uncommenting the &quot; image: ghcr.io/pht-medic/node-airflow:latest&quot; line</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ------------- ommitted ------------</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  airflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # replace with the build command</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./airflow&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # remove the image command</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ghcr.io/pht-medic/airflow:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ------------- ommitted ------------</span></span></code></pre></div><h2 id="edit-airflow-admin-user-password" tabindex="-1">Edit airflow admin user/password <a class="header-anchor" href="#edit-airflow-admin-user-password" aria-label="Permalink to &quot;Edit airflow admin user/password&quot;">​</a></h2><p>Changing the Airflow admin password/user in the env file after the build is not directly possible. Either use Airflow UI to change the password or delete the airflow volume and rebuild after the change.</p><h2 id="airflow-behind-a-reverse-proxy" tabindex="-1">Airflow behind a reverse proxy <a class="header-anchor" href="#airflow-behind-a-reverse-proxy" aria-label="Permalink to &quot;Airflow behind a reverse proxy&quot;">​</a></h2><p>Edit the airflow configuration in <code>airflow/airflow.cfg</code> according to the instructions found <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/run-behind-proxy.html" target="_blank" rel="noreferrer">here</a> Set forwarding in your reverse proxy (nginx for example) to access the airflow instance running on <code>http://127.0.0.1:8080</code> After updating the configuration stop the instance if it is running (<code>docker-compose down</code>) and restart it after rebuilding the image (<code>docker-compose up --build -d</code>).</p><h2 id="using-an-existing-secret-for-the-crypto-private-key" tabindex="-1">Using an Existing Secret for the Crypto Private Key <a class="header-anchor" href="#using-an-existing-secret-for-the-crypto-private-key" aria-label="Permalink to &quot;Using an Existing Secret for the Crypto Private Key&quot;">​</a></h2><p>Should you not wish to copy and paste the contents of the privatre key used for encrypting intermediate results into your <code>values.yaml</code> for deployment, you can also create a generic kubernetes secret from a file containing the private key (e.g. <code>myPrivateKey.pem</code>) and use that secret in the <code>values.yaml</code> to provide the needed information.</p><h3 id="create-a-generic-secret" tabindex="-1">Create a Generic Secret <a class="header-anchor" href="#create-a-generic-secret" aria-label="Permalink to &quot;Create a Generic Secret&quot;">​</a></h3><p>First, make sure your crypto private key is saved to a file on the local machine, we will use <code>myPrivateKey.pem</code> for this example. Now create a generic kuberneets secret with any name you wish to use, we will call ours &quot;super-safe-node-key&quot;:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl create secret generic super-safe-node-key --from-file=private_key.pem=/path/to/private_key.pem</span></span></code></pre></div><h3 id="use-secret-in-values-yaml" tabindex="-1">Use Secret in <code>values.yaml</code> <a class="header-anchor" href="#use-secret-in-values-yaml" aria-label="Permalink to &quot;Use Secret in \`values.yaml\`&quot;">​</a></h3><p>Now that we have a sceret with our private crypto key, we can use that secret when deploying the node by providing the name of the secret in the <code>values.yaml</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  crypto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    existingSecret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">super-safe-node-key</span></span></code></pre></div>`,19)]))}const k=a(n,[["render",o]]);export{u as __pageData,k as default};
